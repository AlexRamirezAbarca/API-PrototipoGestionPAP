@model WEB_APP_PrototipoGestionPAP.Models.ViewModels.CatalogViewModel<WEB_APP_PrototipoGestionPAP.Models.Roles>
@{
    ViewBag.Title = Model.Title;

    var predefinedModules = new List<string> {
        "Usuarios","Personas","Roles","Reportes","Acciones","Carreras","EjesPlanNacionalDesarrollo","Facultades",
        "MetasPlanNacionalDesarrollo","ObjetivosEstrategicosInstitucionales","ObjetivosOperativos","ObjetivosPlanNacionalDesarrollo",
        "PoliticasPlanNacionalDesarrollo","ProductosInstitucionales","ProgramasInstitucionales","ProgramasNacionales",
        "ProgramasPresupuestarios","UnidadesEjecutoras","UnidadesResponsables","Actividades","ObrasTareas","EjecucionesMensuales","Indicadores"
    };

    Func<string, string> getBadgeClass = op =>
    {
        switch (op)
        {
            case "Lectura": return "bg-primary text-white";
            case "Escritura": return "bg-info text-dark";
            case "Actualización": return "bg-blue-medium text-white";
            case "Eliminación": return "bg-blue-dark text-white";
            default: return "bg-secondary text-white";
        }
    };
}

<style>
    .bg-blue-medium {
        background-color: #0056b3 !important;
    }

    .bg-blue-dark {
        background-color: #003366 !important;
    }

    .btn-primary {
        background-color: #004383;
        border-color: #004383;
    }

    .fab-add {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 24px;
        line-height: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        z-index: 9999;
    }

    .pagination-custom .page-link {
        background-color: white;
        border-color: #dee2e6;
        color: #6c757d;
    }

        .pagination-custom .page-link:hover {
            background-color: #f8f9fa;
            border-color: #cfd4da;
            color: #343a40;
        }

    .pagination-custom .page-item.active .page-link {
        background-color: #004383 !important;
        border-color: #004383 !important;
        color: white !important;
        font-weight: bold;
        border-width: 2px;
    }

        .pagination-custom .page-item.active .page-link:hover {
            background-color: #003366 !important;
            border-color: #003366 !important;
            color: white !important;
        }

    .pagination-custom .page-item.disabled .page-link {
        border-color: #dee2e6;
        color: transparent;
        cursor: not-allowed;
    }

    .badge-permiso {
        font-weight: bold;
        margin-right: 0.25rem;
        margin-bottom: 0.25rem;
        border-radius: 12px;
        padding: 0.4em 0.7em;
        font-size: 0.85rem;
    }

    .badge-danger {
        background-color: rgba(220, 53, 69, 0.7) !important;
    }

    .badge-modulo {
        font-weight: bolder;
    }

    .module-container {
        margin-bottom: 1rem;
        border: 1px solid #dee2e6;
        padding: 1rem;
        border-radius: 10px;
        background-color: #f8f9fa;
    }

    .remove-module {
        cursor: pointer;
        color: red;
    }

    .permissions-wrapper {
        max-height: 65px;
        overflow: hidden;
        position: relative;
        transition: max-height 0.3s ease;
        cursor: pointer;
    }

        .permissions-wrapper.expanded {
            max-height: none;
        }

        .permissions-wrapper.can-expand:not(.expanded)::after {
            content: "Ver mas";
            font-weight: bold;
            color: #f8f9fa;
            position: absolute;
            bottom: 0;
            left: 0;
            background-color: #2e2e2e;
            padding: 0 5px;
            box-shadow: 2px 2px 4px 0 rgba(20, 20, 20, 0.3);
        }

        .permissions-wrapper.can-expand.expanded::after {
            content: "";
        }
</style>

<div class="card m-2">
    <div class="card-header text-center bg-light">
        <h3 class="m-0 fw-bold">@Model.Title</h3>
    </div>
    <div class="card-body">
        <form id="searchForm" method="get" action="@Url.Action("Index", Model.ControllerName)" class="mb-3">
            <div class="d-flex">
                <input type="text" class="form-control me-2" id="searchInput" name="filter" placeholder="Buscar..." value="@Model.CurrentFilter" />
                @Html.DropDownList("filterField", new SelectList(new[] {
                new { Value = "Nombre", Text = "Filtrar por Nombre" },
                new { Value = "Descripcion", Text = "Filtrar por Descripción" }
                }, "Value", "Text", Model.CurrentFilterField),
                         new { @class = "form-select", id = "filterFieldSelect" })
                <input type="hidden" name="page" value="1" id="currentPage" />
            </div>
        </form>
        <table class="table table-bordered table-striped" id="tblRoles">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Permisos</th>
                    @if (Model.CanUpdate || Model.CanDelete)
                    {
                        <th class="text-center">Acciones</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (Model.Items != null && Model.Items.Any())
                {
                    foreach (var rol in Model.Items)
                    {
                        <tr>
                            <td>@rol.RolId</td>
                            <td>@rol.Nombre</td>
                            <td>@rol.Descripcion</td>
                            <td>
                                <div class="permissions-wrapper">
                                    @if (rol.Permisos != null && rol.Permisos.Any())
                                    {
                                        foreach (var p in rol.Permisos)
                                        {
                                            var parts = p.Codigo.Split("|");
                                            if (parts.Length == 2)
                                            {
                                                <span class="badge badge-permiso @getBadgeClass(parts[1])">
                                                    <span class="badge-modulo">@parts[0]</span>: @parts[1]
                                                </span>
                                            }
                                        }
                                    }
                                </div>
                            </td>
                            @if (Model.CanUpdate || Model.CanDelete)
                            {
                                <td class="text-center">
                                    <div class="d-flex justify-content-center gap-2">
                                        @if (Model.CanUpdate)
                                        {
                                            <a href="#"
                                               class="btn btn-sm btn-outline-secondary btn-edit"
                                               data-bs-toggle="modal"
                                               data-bs-target="#editarModal"
                                               data-rolid="@rol.RolId"
                                               data-nombre="@rol.Nombre"
                                               data-descripcion="@rol.Descripcion"
                                               data-permisos="@(String.Join(",", rol.Permisos.Select(x => x.Codigo)))">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                        }
                                        @if (Model.CanDelete)
                                        {
                                            <form action="@Url.Action("Eliminar", Model.ControllerName, new { id = rol.RolId })" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('¿Está seguro de eliminar este elemento?');">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@( (Model.CanUpdate || Model.CanDelete) ? 5 : 4 )" class="text-center">Sin registros</td>
                    </tr>
                }
            </tbody>
        </table>

        @Html.Partial("_Pagination", new WEB_APP_PrototipoGestionPAP.Models.ViewModels.PaginationViewModel
   {
       CurrentPage = Model.CurrentPage,
       TotalPages = Model.TotalPages,
       Filter = Model.CurrentFilter,
       FilterField = Model.CurrentFilterField
   })

        @if (Model.CanWrite)
        {
            <button type="button" class="btn btn-primary fab-add" data-bs-toggle="modal" data-bs-target="#agregarModal">+</button>
        }
    </div>
</div>

<div class="modal fade" id="agregarModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="background-color:#fff; color:#000;">
            <div class="modal-header">
                <h5 class="modal-title">Agregar Rol</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <form action="@Url.Action("Agregar", Model.ControllerName)" method="post" id="formAgregar">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="txtNombre" class="form-label">Nombre del Rol</label>
                        <input type="text" class="form-control" id="txtNombre" name="Nombre" required />
                    </div>
                    <div class="mb-3">
                        <label for="txtDescripcion" class="form-label">Descripción</label>
                        <input type="text" class="form-control" id="txtDescripcion" name="Descripcion" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Permisos por Módulo</label>
                        <div id="modulesContainer"></div>
                        <button type="button" id="btnAddModule" class="btn btn-sm btn-outline-primary mt-2">Agregar Módulo</button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        <button type="submit" class="btn btn-primary" id="btnGuardarAgregar" disabled>Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editarModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="background-color:#fff; color:#000;">
            <div class="modal-header">
                <h5 class="modal-title">Editar Rol</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <form action="@Url.Action("Editar", Model.ControllerName)" method="post" id="formEditar">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Id" id="txtRolId" />
                    <div class="mb-3">
                        <label for="txtNombreEdit" class="form-label">Nombre del Rol</label>
                        <input type="text" class="form-control" id="txtNombreEdit" name="Nombre" required />
                    </div>
                    <div class="mb-3">
                        <label for="txtDescripcionEdit" class="form-label">Descripción</label>
                        <input type="text" class="form-control" id="txtDescripcionEdit" name="Descripcion" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Permisos por Módulo</label>
                        <div id="modulesContainerEdit"></div>
                        <button type="button" id="btnAddModuleEdit" class="btn btn-sm btn-outline-primary mt-2">Agregar Módulo</button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary" id="btnGuardarEditar" disabled>Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var predefinedModules = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(predefinedModules));

        function createModuleElement(moduleIndex, mode) {
            var container = document.createElement("div");
            container.className = "module-container mb-2";
            container.setAttribute("data-index", moduleIndex);

            var header = document.createElement("div");
            header.className = "module-header p-2 mb-1";
            header.style.backgroundColor = "#f8f9fa";
            header.style.border = "1px solid #dee2e6";
            header.style.borderRadius = "5px";
            header.style.cursor = "pointer";
            header.style.fontWeight = "bold";
            header.style.display = "flex";
            header.style.justifyContent = "space-between";
            header.style.alignItems = "center";

            var headerRef = document.createElement("span");
            headerRef.innerText = "Módulo " + (moduleIndex + 1);
            header.appendChild(headerRef);

            var toggleIcon = document.createElement("span");
            toggleIcon.innerText = "−";
            header.appendChild(toggleIcon);

            var collapseDiv = document.createElement("div");
            collapseDiv.className = "collapse show";
            collapseDiv.id = "moduleCollapse" + moduleIndex;
            collapseDiv.style.border = "1px solid #dee2e6";
            collapseDiv.style.padding = "1rem";
            collapseDiv.style.borderRadius = "10px";
            collapseDiv.style.backgroundColor = "#f8f9fa";

            function collapseOthers() {
                var allModules = container.parentNode.querySelectorAll(".module-container");
                allModules.forEach(function(mod) {
                    if (mod !== container) {
                        var modCollapse = mod.querySelector(".collapse");
                        var modIcon = mod.querySelector(".module-header span:last-child");
                        if (modCollapse && modCollapse.classList.contains("show")) {
                            modCollapse.classList.remove("show");
                            if(modIcon) {
                                modIcon.innerText = "+";
                            }
                        }
                    }
                });
            }

            header.addEventListener("click", function () {
                if (collapseDiv.classList.contains("show")) {
                    collapseDiv.classList.remove("show");
                    toggleIcon.innerText = "+";
                } else {
                    collapseOthers();
                    collapseDiv.classList.add("show");
                    toggleIcon.innerText = "−";
                }
            });

            var moduleLabel = document.createElement("label");
            moduleLabel.className = "form-label";
            moduleLabel.innerText = "Seleccione el módulo:";
            collapseDiv.appendChild(moduleLabel);

            var moduleSelect = document.createElement("select");
            moduleSelect.className = "form-select mb-2 module-select";
            moduleSelect.name = "Modules[" + moduleIndex + "].ModuleName";
            moduleSelect.required = true;

            var defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.innerText = "-- Seleccione un Módulo --";
            moduleSelect.appendChild(defaultOption);

            predefinedModules.forEach(function(mod) {
                var opt = document.createElement("option");
                opt.value = mod;
                opt.innerText = mod;
                moduleSelect.appendChild(opt);
            });

            collapseDiv.appendChild(moduleSelect);

            moduleSelect.addEventListener("change", function () {
                if (moduleSelect.value !== "") {
                    headerRef.innerText = moduleSelect.value;
                } else {
                    headerRef.innerText = "Módulo " + (moduleIndex + 1);
                }
                updateModuleSelectOptions();
            });

            var permissionsContainer = document.createElement("div");
            permissionsContainer.className = "row";

            var operations = ["Lectura","Escritura","Actualización","Eliminación"];
            operations.forEach(function(op) {
                var col = document.createElement("div");
                col.className = "col-6";

                var divCheck = document.createElement("div");
                divCheck.className = "form-check";

                var checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.className = "form-check-input";
                checkbox.value = op;
                checkbox.id = "module" + moduleIndex + "_" + op + "_" + mode;

                var label = document.createElement("label");
                label.className = "form-check-label";
                label.htmlFor = checkbox.id;
                label.innerText = op;

                divCheck.appendChild(checkbox);
                divCheck.appendChild(label);
                col.appendChild(divCheck);
                permissionsContainer.appendChild(col);
            });

            collapseDiv.appendChild(permissionsContainer);

            var selectAllBtn = document.createElement("button");
            selectAllBtn.type = "button";
            selectAllBtn.className = "btn btn-sm btn-secondary mt-2";
            selectAllBtn.innerText = "Seleccionar todo";
            selectAllBtn.addEventListener("click", function() {
                var checkboxes = collapseDiv.querySelectorAll("input[type=checkbox]");
                checkboxes.forEach(function(chk) {
                    chk.checked = true;
                });
            });
            collapseDiv.appendChild(selectAllBtn);

            var removeBtn = document.createElement("button");
            removeBtn.type = "button";
            removeBtn.className = "btn btn-sm btn-danger mt-2 ms-2";
            removeBtn.innerText = "Eliminar módulo";
            removeBtn.addEventListener("click", function () {
                container.remove();
                updateModuleSelectOptions();
            });
            collapseDiv.appendChild(removeBtn);

            moduleSelect.addEventListener("change", updateModuleSelectOptions);

            container.appendChild(header);
            container.appendChild(collapseDiv);

            return container;
        }

        function updateModuleSelectOptions() {
            var selectedModules = [];
            var selects = document.querySelectorAll(".module-select");

            selects.forEach(function(select) {
                var val = select.value;
                if (val !== "") {
                    selectedModules.push(val);
                }
            });

            selects.forEach(function(select) {
                var currentVal = select.value;
                for (var i = 0; i < select.options.length; i++) {
                    var opt = select.options[i];
                    if (opt.value !== "" && opt.value !== currentVal && selectedModules.indexOf(opt.value) !== -1) {
                        opt.disabled = true;
                    } else {
                        opt.disabled = false;
                    }
                }
            });
        }

        function collapseAllModules(modulesContainer) {
            var modules = modulesContainer.querySelectorAll(".module-container");
            modules.forEach(function(moduleElem) {
                var collapseDiv = moduleElem.querySelector(".collapse");
                var toggleIcon = moduleElem.querySelector(".module-header span:last-child");
                if (collapseDiv && collapseDiv.classList.contains("show")) {
                    collapseDiv.classList.remove("show");
                    if(toggleIcon) {
                        toggleIcon.innerText = "+";
                    }
                }
            });
        }

        document.addEventListener("DOMContentLoaded", function () {

            var modulesContainer = document.getElementById("modulesContainer");
            var moduleCounter = 0;
            var btnAddModule = document.getElementById("btnAddModule");

            if (btnAddModule) {
                btnAddModule.addEventListener("click", function () {
                    var moduleContainers = modulesContainer.querySelectorAll(".module-container");
                    if (moduleContainers.length > 0) {
                        var lastModule = moduleContainers[moduleContainers.length - 1];
                        var lastSelect = lastModule.querySelector("select.module-select");
                        if (lastSelect.value === "") {
                            alert("Por favor, seleccione la entidad del módulo antes de agregar uno nuevo.");
                            return;
                        }
                    }
                    collapseAllModules(modulesContainer);
                    var moduleElem = createModuleElement(moduleCounter, "Ag");
                    modulesContainer.appendChild(moduleElem);
                    moduleCounter++;
                    updateModuleSelectOptions();
                });
            }

            var modulesContainerEdit = document.getElementById("modulesContainerEdit");
            var moduleCounterEdit = 0;
            var btnAddModuleEdit = document.getElementById("btnAddModuleEdit");

            if (btnAddModuleEdit) {
                btnAddModuleEdit.addEventListener("click", function () {
                    var moduleContainers = modulesContainerEdit.querySelectorAll(".module-container");
                    if (moduleContainers.length > 0) {
                        var lastModule = moduleContainers[moduleContainers.length - 1];
                        var lastSelect = lastModule.querySelector("select.module-select");
                        if (lastSelect.value === "") {
                            alert("Por favor, seleccione la entidad del módulo antes de agregar uno nuevo.");
                            return;
                        }
                    }
                    collapseAllModules(modulesContainerEdit);
                    var moduleElem = createModuleElement(moduleCounterEdit, "Ed");
                    modulesContainerEdit.appendChild(moduleElem);
                    moduleCounterEdit++;
                    updateModuleSelectOptions();
                });
            }

            var formAgregar = document.getElementById("formAgregar");
            var btnGuardarAgregar = document.getElementById("btnGuardarAgregar");
            if (formAgregar) {
                formAgregar.addEventListener("input", function() {
                    var requiredInputs = formAgregar.querySelectorAll("input[required]");
                    var isValid = true;
                    requiredInputs.forEach(function(inp) {
                        if (!inp.value.trim()) {
                            inp.classList.add("is-invalid");
                            isValid = false;
                        } else {
                            inp.classList.remove("is-invalid");
                        }
                    });
                    btnGuardarAgregar.disabled = !isValid;
                });

                formAgregar.addEventListener("submit", function(e) {
                    var modules = document.querySelectorAll("#modulesContainer .module-container");
                    var permissions = [];
                    modules.forEach(function(moduleElem) {
                        var moduleSelect = moduleElem.querySelector("select.module-select");
                        var moduleName = moduleSelect.value;
                        if (moduleName === "") return;
                        var checkboxes = moduleElem.querySelectorAll("input[type=checkbox]");
                        checkboxes.forEach(function(chk) {
                            if (chk.checked) {
                                permissions.push(moduleName + "|" + chk.value);
                            }
                        });
                    });
                    var existingInput = document.getElementById("hiddenPermisos");
                    if (existingInput) { existingInput.remove(); }
                    var hiddenField = document.createElement("input");
                    hiddenField.type = "hidden";
                    hiddenField.name = "permisos";
                    hiddenField.id = "hiddenPermisos";
                    hiddenField.value = permissions.join(",");
                    this.appendChild(hiddenField);
                });
            }

            var formEditar = document.getElementById("formEditar");
            var btnGuardarEditar = document.getElementById("btnGuardarEditar");
            if (formEditar) {
                formEditar.addEventListener("input", function() {
                    var requiredInputs = formEditar.querySelectorAll("input[required]");
                    var isValid = true;
                    requiredInputs.forEach(function(inp) {
                        if (!inp.value.trim()) {
                            inp.classList.add("is-invalid");
                            isValid = false;
                        } else {
                            inp.classList.remove("is-invalid");
                        }
                    });
                    btnGuardarEditar.disabled = !isValid;
                });

                formEditar.addEventListener("submit", function(e) {
                    var modules = document.querySelectorAll("#modulesContainerEdit .module-container");
                    var permissions = [];
                    modules.forEach(function(moduleElem) {
                        var moduleSelect = moduleElem.querySelector("select.module-select");
                        var moduleName = moduleSelect.value;
                        if (moduleName === "") return;
                        var checkboxes = moduleElem.querySelectorAll("input[type=checkbox]");
                        checkboxes.forEach(function(chk) {
                            if (chk.checked) {
                                permissions.push(moduleName + "|" + chk.value);
                            }
                        });
                    });
                    var existingInput = document.getElementById("hiddenPermisosEdit");
                    if (existingInput) { existingInput.remove(); }
                    var hiddenField = document.createElement("input");
                    hiddenField.type = "hidden";
                    hiddenField.name = "permisos";
                    hiddenField.id = "hiddenPermisosEdit";
                    hiddenField.value = permissions.join(",");
                    this.appendChild(hiddenField);
                });
            }

            document.querySelectorAll(".btn-edit").forEach(function(button) {
                button.addEventListener("click", function () {
                    var rolId = this.getAttribute("data-rolid");
                    var nombre = this.getAttribute("data-nombre");
                    var descripcion = this.getAttribute("data-descripcion");
                    var permisosStr = this.getAttribute("data-permisos");
                    var permisos = permisosStr ? permisosStr.split(",") : [];

                    document.getElementById("txtRolId").value = rolId;
                    document.getElementById("txtNombreEdit").value = nombre;
                    document.getElementById("txtDescripcionEdit").value = descripcion;

                    modulesContainerEdit.innerHTML = "";
                    moduleCounterEdit = 0;

                    var modulesMap = {};
                    permisos.forEach(function(p) {
                        var parts = p.split("|");
                        if (parts.length === 2) {
                            var moduleName = parts[0];
                            var operation = parts[1];
                            if (!modulesMap[moduleName]) {
                                modulesMap[moduleName] = new Set();
                            }
                            modulesMap[moduleName].add(operation);
                        }
                    });

                    Object.keys(modulesMap).forEach(function(moduleName) {
                        var moduleElem = createModuleElement(moduleCounterEdit, "Ed");
                        var select = moduleElem.querySelector("select.module-select");
                        select.value = moduleName;
                        var headerEl = moduleElem.querySelector(".module-header span:first-child");
                        if(headerEl) {
                            headerEl.innerText = moduleName;
                        }

                        var selectedOps = Array.from(modulesMap[moduleName]);
                        var checkboxes = moduleElem.querySelectorAll("input[type=checkbox]");
                        checkboxes.forEach(function(chk) {
                            if (selectedOps.indexOf(chk.value) !== -1) {
                                chk.checked = true;
                            }
                        });

                        modulesContainerEdit.appendChild(moduleElem);
                        moduleCounterEdit++;
                    });

                    updateModuleSelectOptions();

                    var requiredInputs = formEditar.querySelectorAll("input[required]");
                    var isValid = true;
                    requiredInputs.forEach(function(inp) {
                        if (!inp.value.trim()) {
                            inp.classList.add("is-invalid");
                            isValid = false;
                        } else {
                            inp.classList.remove("is-invalid");
                        }
                    });
                    btnGuardarEditar.disabled = !isValid;
                });
            });

            var permissionWrappers = document.querySelectorAll(".permissions-wrapper");
            permissionWrappers.forEach(function(wrapper) {
                if (wrapper.scrollHeight > wrapper.clientHeight) {
                    wrapper.classList.add("can-expand");
                }
                wrapper.addEventListener("click", function() {
                    this.classList.toggle("expanded");
                });
            });

            var searchForm = document.getElementById("searchForm");
            var searchInput = document.getElementById("searchInput");
            var filterFieldSelect = document.getElementById("filterFieldSelect");
            var currentPageInput = document.getElementById("currentPage");
            var debounceTimer;

            function handleSearch() {
                currentPageInput.value = 1;
                searchForm.submit();
            }

            if (searchInput) {
                searchInput.addEventListener("input", function () {
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(handleSearch, 500);
                });
            }

            if (filterFieldSelect) {
                filterFieldSelect.addEventListener("change", function () {
                    currentPageInput.value = 1;
                    searchForm.submit();
                });
            }

            if (searchForm) {
                searchForm.addEventListener("submit", function (e) {
                    e.preventDefault();
                    handleSearch();
                });
            }

            document.querySelectorAll(".modal").forEach(function(modal) {
                modal.addEventListener("hidden.bs.modal", function () {
                    var inputs = this.querySelectorAll("input");
                    inputs.forEach(function(inp) {
                        inp.value = "";
                        inp.classList.remove("is-invalid");
                    });

                    if (this.id === "agregarModal" && btnGuardarAgregar) {
                        btnGuardarAgregar.disabled = true;
                    }
                    if (this.id === "editarModal" && btnGuardarEditar) {
                        btnGuardarEditar.disabled = true;
                    }

                    var mc = this.querySelectorAll(".module-container");
                    mc.forEach(function(m) {
                        m.remove();
                    });
                });
            });
        });
    </script>
}
